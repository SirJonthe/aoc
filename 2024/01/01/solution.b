#include <sys>
#include <stdlib>

const FW_MAJ_VER = 4;
const FW_MIN_VER = 2;
const FW_HOT_VER = 0;

const FONT_ATLAS_SIZE_WORDS = 380;
static FONT_ATLAS[FONT_ATLAS_SIZE_WORDS] = {
	0xfffb, 0xfbfb, 0xfffb, 0xffff, 0xffeb, 0xebff,
	0xffff, 0xffff, 0xffeb, 0xc1eb, 0xc1eb, 0xffff,
	0xffc3, 0xe9c1, 0xcbe1, 0xffff, 0xffdd, 0xeff7,
	0xfbdd, 0xffff, 0xfff1, 0xfbd5, 0xedd3, 0xffff,
	0xfffb, 0xfbff, 0xffff, 0xffff, 0xfff7, 0xfbfb,
	0xfbf7, 0xffff, 0xfffb, 0xf7f7, 0xf7fb, 0xffff,
	0xffff, 0xebf7, 0xebff, 0xffff, 0xffff, 0xf7e3,
	0xf7ff, 0xffff, 0xffff, 0xffff, 0xfffb, 0xfdff,
	0xffff, 0xffe3, 0xffff, 0xffff, 0xffff, 0xffff,
	0xfffb, 0xffff, 0xffdf, 0xeff7, 0xfbfd, 0xffff,
	0xffe3, 0xddd5, 0xdde3, 0xffff, 0xfff7, 0xf3f7,
	0xf7e3, 0xffff, 0xffe1, 0xdfe3, 0xfdc1, 0xffff,
	0xffe1, 0xdfe3, 0xdfe1, 0xffff, 0xffdd, 0xddc1,
	0xdfdf, 0xffff, 0xffc1, 0xfde1, 0xdfe1, 0xffff,
	0xffe3, 0xfde1, 0xdde3, 0xffff, 0xffc1, 0xdfcf,
	0xdfdf, 0xffff, 0xffe3, 0xdde3, 0xdde3, 0xffff,
	0xffc3, 0xddc3, 0xdfdf, 0xffff, 0xffff, 0xfbff,
	0xfbff, 0xffff, 0xffff, 0xfbff, 0xfbfd, 0xffff,
	0xfff7, 0xfbfd, 0xfbf7, 0xffff, 0xffff, 0xe3ff,
	0xe3ff, 0xffff, 0xfffd, 0xfbf7, 0xfbfd, 0xffff,
	0xffe1, 0xdfe1, 0xfffd, 0xffff, 0xffe3, 0xcdd5,
	0xcdfb, 0xffff, 0xfff7, 0xebdd, 0xc1dd, 0xffff,
	0xfff1, 0xede1, 0xdde1, 0xffff, 0xffc3, 0xfdfd,
	0xfdc3, 0xffff, 0xffe1, 0xdddd, 0xdde1, 0xffff,
	0xffc1, 0xfde1, 0xfdc1, 0xffff, 0xffc1, 0xfde1,
	0xfdfd, 0xffff, 0xffc3, 0xfdcd, 0xddc3, 0xffff,
	0xffdd, 0xddc1, 0xdddd, 0xffff, 0xffe3, 0xf7f7,
	0xf7e3, 0xffff, 0xffc1, 0xdfdf, 0xdde3, 0xffff,
	0xffdd, 0xdde1, 0xdddd, 0xffff, 0xfffd, 0xfdfd,
	0xfdc1, 0xffff, 0xffc9, 0xd5dd, 0xdddd, 0xffff,
	0xffdd, 0xd9d5, 0xcddd, 0xffff, 0xffe3, 0xdddd,
	0xdde3, 0xffff, 0xffe1, 0xdde1, 0xfdfd, 0xffff,
	0xffe3, 0xdddd, 0xcdc3, 0xffff, 0xffe1, 0xddc1,
	0xeddd, 0xffff, 0xffc3, 0xfde3, 0xdfe1, 0xffff,
	0xffc1, 0xf7f7, 0xf7f7, 0xffff, 0xffdd, 0xdddd,
	0xdde3, 0xffff, 0xffdd, 0xdddd, 0xebf7, 0xffff,
	0xffdd, 0xdddd, 0xd5c9, 0xffff, 0xffdd, 0xdde3,
	0xdddd, 0xffff, 0xffdd, 0xddeb, 0xf7f7, 0xffff,
	0xffc1, 0xdfe3, 0xfdc1, 0xffff, 0xfff3, 0xfbfb,
	0xfbf3, 0xffff, 0xfffd, 0xfbf7, 0xefdf, 0xffff,
	0xfff3, 0xf7f7, 0xf7f3, 0xffff, 0xfff7, 0xebff,
	0xffff, 0xffff, 0xffff, 0xffff, 0xffc1, 0xffff,
	0xfffb, 0xf7ff, 0xffff, 0xffff, 0xffff, 0xc3dd,
	0xddc3, 0xffff, 0xfffd, 0xfde1, 0xdde1, 0xffff,
	0xffff, 0xc3fd, 0xfdc3, 0xffff, 0xffdf, 0xdfc3,
	0xddc3, 0xffff, 0xffff, 0xe3c1, 0xfdc3, 0xffff,
	0xffe7, 0xfbf3, 0xfbfb, 0xffff, 0xffff, 0xc3dd,
	0xc3df, 0xe3ff, 0xfffd, 0xfde1, 0xdddd, 0xffff,
	0xfff7, 0xfff3, 0xf7e3, 0xffff, 0xffdf, 0xffdf,
	0xdfdd, 0xe3ff, 0xfffd, 0xdde1, 0xdddd, 0xffff,
	0xfffb, 0xfbfb, 0xfbe7, 0xffff, 0xffff, 0xe1d5,
	0xdddd, 0xffff, 0xffff, 0xe1dd, 0xdddd, 0xffff,
	0xffff, 0xe3dd, 0xdde3, 0xffff, 0xffff, 0xe1dd,
	0xe1fd, 0xfdff, 0xffff, 0xc3dd, 0xc3df, 0xdfff,
	0xffff, 0xc5f9, 0xfdfd, 0xffff, 0xffff, 0xc3f9,
	0xc7e1, 0xffff, 0xfffb, 0xf3fb, 0xfbe7, 0xffff,
	0xffff, 0xdddd, 0xdde3, 0xffff, 0xffff, 0xdddd,
	0xebf7, 0xffff, 0xffff, 0xdddd, 0xd5eb, 0xffff,
	0xffff, 0xdde3, 0xdddd, 0xffff, 0xffff, 0xdddd,
	0xc3df, 0xe3ff, 0xffff, 0xc1ef, 0xf3c1, 0xffff,
	0xffe7, 0xf7fb, 0xf7e7, 0xffff, 0xfffb, 0xfbfb,
	0xfbfb, 0xffff, 0xfff3, 0xf7ef, 0xf7f3, 0xffff,
	0xffeb, 0xf5ff, 0xffff, 0xffff, 0xffc1, 0xc1c1,
	0xc1c1, 0xffff
};

const FONT_ATLAS_CHAR_WIDTH_COUNT  =   1;
const FONT_ATLAS_CHAR_HEIGHT_COUNT =  95;
const FONT_CHAR_PX_WIDTH           =   6;
const FONT_CHAR_PX_HEIGHT          =   8;
const FONT_CELL_PX_WIDTH           =   8;
const FONT_CELL_PX_HEIGHT          =   8;

const FONT_CHAR_ASCII_START =  33;
const FONT_CHAR_ASCII_END   = 126;

const HWID_KB  = 0x0001;
const HWID_RDD = 0x0002;
const HWID_MON = 0x0003;
const HWID_PWR = 0x0004;
const HWID_TTY = 0x0005;

const MON_MSG_PIXMODE              = 0xface;
const MON_MSG_TXTMODE              = 0xbeef;
const MON_MSG_TXTMODE_LOADFONT     = 0xabcd;
const MON_MSG_TXTMODE_LOADFONTMETA = 0xaffe;
const MON_MSG_TXTMODE_SCROLL_DOWN  = 0x123a;
const MON_MSG_TXTMODE_SCROLL_UP    = 0x321b;

const NUM_PORTS = 16;
auto __hwids[NUM_PORTS];

d_hwscan( void )
{
	auto i = 0;
	while (i < NUM_PORTS) {
		__hwids[i] = hwid(i);
		++i;
	}
}

const PORT_UNDEF = 0xffff;

d_find_hw(id)
{
	auto i = 0;
	while (i < NUM_PORTS && __hwids[i] != id) {
		++i;
	}
	if (i == NUM_PORTS) {
		return PORT_UNDEF;
	}
	return i;
}

auto __port_tty = PORT_UNDEF;

d_init_tty( void )
{
	__port_tty = d_find_hw(HWID_TTY);
	if (__port_tty == PORT_UNDEF) {
		return FALSE;
	}
	return TRUE;
}

auto dig10[10] = "0123456789";
auto dig16[16] = "0123456789abcdef";
auto DIG16[16] = "0123456789ABCDEF";

d_outf(port, format, values)
{
	if (port == PORT_UNDEF) { return FALSE; }
	auto start = 0, end = 0, val = 0, esc = FALSE;
	if (values != NULL) {
		while (format[end] != 0) {
			if (esc == TRUE) {
				auto ch = format[end];
				if (ch == 'd' || ch == 'i') {
					auto num = values[val];
					auto dec[6];
					auto i = 0;
					if (num & 0x8000 == 0) {
						while (i < 5) {
							dec[5 - i] = dig10[num%10];
							num /= 10;
							++i;
							if (num == 0) {
								break;
							}
						}
					} else {
						num = num & 0x7fff;
						while (i < 5) {
							dec[5 - i] = dig10[num%10];
							num /= 10;
							++i;
							if (num == 0) {
								break;
							}
						}
						dec[5 - i] = '-';
						++i;
					}
					if (!hwpush(port, dec + 6 - i, i, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'u') {
					auto num = values[val];
					auto dec[5];
					auto i = 0;
					while (i < 5) {
						dec[4 - i] = dig10[num%10];
						num /= 10;
						++i;
						if (num == 0) {
							break;
						}
					}
					if (!hwpush(port, dec + 5 - i, i, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'x' || ch == 'p') {
					auto num = values[val];
					auto hex[4];
					auto i = 0;
					while (i < 4) {
						hex[3 - i] = dig16[num%16];
						num /= 16;
						++i;
					}
					if (!hwpush(port, hex, 4, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'X') {
					auto num = values[val];
					auto hex[4];
					auto i = 0;
					while (i < 4) {
						hex[3 - i] = DIG16[num%16];
						num /= 16;
						++i;
					}
					if (!hwpush(port, hex, 4, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'c') {
					if (!hwpush(port, values[val], 1, CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 's') {
					if (!d_outf(port, values[val], NULL)) { return FALSE; }
				} else if (ch == '%') {
					auto escch[] = "%";
					if (!hwpush(port, escch, sizeof(escch), CLOCKS_PER_SEC)) { return FALSE; }
				} else if (ch == 'n') {
				} else {
					auto fmterr[] = "{format}";
					if (!hwpush(port, fmterr, sizeof(fmterr), CLOCKS_PER_SEC)) { return FALSE; }
				}
				++val;
				start = end + 1;
				esc = FALSE;
			} else if (format[end] == '%') {
				if (!hwpush(port, format + start, end - start, CLOCKS_PER_SEC)) { return FALSE; }
				start = end + 1;
				esc = TRUE;
			}
			++end;
		}
		return hwpush(port, format + start, end - start, CLOCKS_PER_SEC);
	}
	while (format[end] != 0) {
		++end;
	}
	return hwpush(port, format + start, end - start, CLOCKS_PER_SEC);
}

err_stall( void )
{
	auto now = clock();
	auto beep_at = now + CLOCKS_PER_SEC;
	auto wrapped_time = now > beep_at;
	while (TRUE) {
		now = clock();
		if (wrapped_time == FALSE && now > beep_at) {
			auto beep[] = "\a";
			d_outf(__port_tty, beep, NULL);
			beep_at = now + CLOCKS_PER_SEC;
			wrapped_time = now > beep_at;
		}
		if (now < beep_at) {
			wrapped_time = FALSE;
		}
	}
}

auto __port_mon = PORT_UNDEF;

printf(format, values)
{
	return d_outf(__port_mon, format, values) || d_outf(__port_tty, format, values);
}

d_require_hw(id)
{
	auto port = d_find_hw(id);
	if (port == PORT_UNDEF) {
		auto fmt[] = "Missing required hardware (%x)\nPlug in hardware and reboot\n";
		auto vals[] = { id };
		printf(fmt, vals);
		err_stall();
	}
	return port;
}

d_init_monitor(mode)
{
	__port_mon = d_require_hw(HWID_MON);

	auto font_metadata[] = {
		FONT_CHAR_PX_WIDTH,
		FONT_CHAR_PX_HEIGHT,
		FONT_ATLAS_CHAR_WIDTH_COUNT,
		FONT_ATLAS_CHAR_HEIGHT_COUNT,
		FONT_CHAR_ASCII_START,
		FONT_CHAR_ASCII_END,
		FONT_CELL_PX_WIDTH,
		FONT_CELL_PX_HEIGHT
	};
	if (
		hwpusht(__port_mon, MON_MSG_TXTMODE, NULL, 0, CLOCKS_PER_SEC)                                           == FALSE ||
		hwpusht(__port_mon, MON_MSG_TXTMODE_LOADFONT, FONT_ATLAS, FONT_ATLAS_SIZE_WORDS, CLOCKS_PER_SEC * 10)   == FALSE ||
		hwpusht(__port_mon, MON_MSG_TXTMODE_LOADFONTMETA, font_metadata, sizeof(font_metadata), CLOCKS_PER_SEC) == FALSE
	) {
		auto msg[] = "Monitor I/O error\n";
		d_outf(__port_tty, msg, NULL);
		err_stall();
	}

	return TRUE;
}

i_print_sys_info( void )
{
	{
		auto  cycles          = 0;
		auto  kcycles         = 0;
		auto  mcycles         = 0;
		auto  start           = clock();
		const CYCLES_PER_LOOP = 5679 - 5581;

		while (clock() - start < 1000) {
			cycles  += CYCLES_PER_LOOP;
			kcycles += cycles   / 1000;
			mcycles += kcycles  / 1000;
			cycles  -= (cycles  / 1000) * 1000;
			kcycles -= (kcycles / 1000) * 1000;
		}
		{
			auto test[] = "\#00#\#01#\#02#\#03#\#04#\#05#\#06#\#07#\#08#\#09#\#0a#\#0b#\#0c#\#0d#\#0e#\#00#\#01#\#02#\#03#\#04#\#05#\#06#\#07#\#08#\#09#\#0a#\#0b#\#0c#\#0d#\#0e#\#00#\#01#\#02#\#03#\#04#\#05#\#06#\#07#\#08#\#09#\#0a#\#0b#\#0c#\#0d#\#0e#\#00#\#01#\#02#\#03#\#04#\#05#\#06#\#07#";
			printf(test, NULL);
			auto s_xerxes[] = "\#0eA\#0dd\#00v\#0ee\#0dn\#00t \#0eC\#0do\#00m\#0ep\#0du\#00t\#0ee\#0dr @ ";
			printf(s_xerxes, NULL);
			auto s_zero[] = "0";
			auto s_unit[] = "%u.";
			if (mcycles > 0) {
				auto s_mhz[] = "%u MHz\n";
				printf(s_unit, &mcycles);
				if (kcycles < 100) { printf(s_zero, NULL); }
				if (kcycles < 10)  { printf(s_zero, NULL); }
				printf(s_mhz, &kcycles);
			} else if (kcycles > 0) {
				auto s_khz[] = "%u KHz\n";
				printf(s_unit, &kcycles);
				if (cycles < 100) { printf(s_zero, NULL); }
				if (cycles < 10)  { printf(s_zero, NULL); }
				printf(s_khz, &cycles);
			} else {
				auto s_hz[] = "%u Hz\n";
				printf(s_hz, &cycles);
			}
		}
	}

	{
		auto fmt[] = "Firmware v%u.%u.%u\n";
		auto vals[] = { FW_MAJ_VER, FW_MIN_VER, FW_HOT_VER };
		printf(fmt, vals);
	}

	{
		auto s_ports[] = "Ports:\n";
		auto s_id[]    = "  %u: %x\n";
		auto s_noid[]  = "  %u: %n\n";
		printf(s_ports, NULL);
		auto i = 0;
		while (i < NUM_PORTS) {
			auto vals[] = { i, __hwids[i] };
			if (__hwids[i] != 0) {
				printf(s_id, vals);
			} else {
				printf(s_noid, vals);
			}
			++i;
		}
	}

	{
		auto ram_remaining;
		asm {
			put 0xffff, $top.
			sub.
			mov ram_remaining.
		}
		auto fmt[] = "RAM available: %u/%u words\n";
		auto vals[] = { ram_remaining, 0xffff };
		printf(fmt, vals);
	}
}

i_finish_stall( void )
{
	{
		auto fmt[] = "\#ef[\#efH\#efA\#efL\#efT\#efE\#efD\#ef]";
		printf(fmt, NULL);
	}
	err_stall();
}

const HI = 0;
const LO = 1;

add32(out, a, b)
{
	auto res[2];
	res[LO] = a[LO] + b[LO];
	res[HI] = a[HI] + b[HI] + (res[LO] < a[LO]);
	out[HI] = res[HI];
	out[LO] = res[LO];
}

sub32(out, a, b)
{
	auto res[2];
	res[LO] = a[LO] - b[LO];
	res[HI] = a[HI] - b[HI] - (a[LO] < b[LO]);
	out[HI] = res[HI];
	out[LO] = res[LO];
}

mul32(out, a, b)
{
	auto res[2];
	auto ll = a[HI] * b[HI];
	auto lh = a[HI] * b[LO];
	auto hl = a[LO] * b[HI];
	auto hh = a[LO] * b[LO];

	res[HI] = ll + lh;
	res[LO] = hh + (res[HI] < ll);
	res[HI] += hl;
	res[LO] += (res[HI] < ll);

	out[LO] = res[LO];
	out[HI] = res[HI];
}

less32(a, b)
{
	if (a[HI] < b[HI]) return 1;
	if (a[HI] > b[HI]) return 0;
	return a[LO] < b[LO];
}

//static A[] = { 0,3, 0,4, 0,2, 0,1, 0,3, 0,3 };
//static B[] = { 0,4, 0,3, 0,5, 0,3, 0,9, 0,3 };

static A[] = {1, 17192, 0, 39850, 0, 24609, 0, 24964, 0, 16230, 0, 29827, 0, 52378, 0, 15961, 0, 48209, 1, 25202, 0, 50850, 1, 17943, 1, 25728, 1, 1017, 0, 39685, 0, 31946, 0, 39808, 0, 45133, 0, 57938, 1, 5114, 0, 40085, 1, 16611, 0, 48132, 0, 36805, 1, 30399, 0, 43007, 0, 64997, 0, 16361, 1, 11931, 1, 22894, 0, 40863, 1, 20453, 0, 64698, 0, 63392, 0, 32665, 1, 17407, 1, 25955, 1, 31322, 1, 22592, 1, 16779, 0, 12263, 0, 56902, 0, 16051, 0, 41613, 0, 48481, 0, 39670, 0, 31830, 1, 28166, 0, 27322, 1, 12161, 0, 12569, 0, 35225, 0, 59674, 0, 18319, 1, 23090, 0, 26170, 1, 4711, 0, 38965, 0, 52976, 0, 15339, 1, 6708, 0, 46476, 0, 11615, 1, 27020, 0, 30522, 0, 52667, 0, 61811, 0, 15611, 0, 31461, 0, 36424, 1, 27209, 0, 10246, 1, 20973, 0, 45418, 0, 45156, 1, 29999, 0, 16691, 0, 43778, 1, 6028, 1, 21466, 1, 28488, 0, 20893, 0, 62456, 0, 33024, 1, 1331, 0, 61522, 0, 16128, 0, 41863, 1, 23148, 0, 59882, 1, 5306, 0, 62709, 0, 16058, 1, 1696, 0, 62624, 0, 47204, 1, 15491, 1, 10994, 0, 25749, 1, 16084, 1, 6126, 1, 14556, 0, 19088, 0, 40308, 0, 39855, 1, 28013, 1, 6086, 0, 64422, 0, 43828, 1, 12265, 0, 13925, 0, 51830, 0, 12507, 0, 50014, 0, 56843, 0, 57063, 0, 37260, 1, 28827, 0, 58862, 0, 57703, 0, 33084, 0, 51041, 1, 31718, 0, 35644, 0, 18669, 0, 56890, 0, 31788, 0, 54517, 0, 52172, 0, 50286, 1, 31330, 0, 56782, 0, 25469, 0, 33882, 0, 56421, 1, 25679, 1, 18311, 0, 62253, 1, 28585, 1, 32941, 0, 37590, 0, 25770, 0, 59401, 1, 7846, 0, 58149, 0, 54118, 0, 59395, 0, 63746, 1, 29347, 0, 50314, 1, 28322, 0, 27751, 0, 26917, 1, 16460, 1, 6433, 0, 30553, 1, 11752, 1, 13932, 0, 30637, 0, 57832, 0, 29795, 1, 5835, 0, 27972, 0, 43433, 0, 45878, 1, 8506, 0, 38197, 0, 63067, 1, 11016, 1, 20620, 0, 19492, 0, 52089, 1, 1253, 1, 17077, 0, 20542, 0, 22143, 1, 8432, 0, 40335, 1, 27175, 0, 19146, 0, 53047, 0, 49843, 1, 30894, 1, 33097, 0, 50516, 0, 23379, 0, 35212, 0, 22440, 0, 51478, 1, 15713, 0, 53260, 1, 17707, 1, 27381, 0, 53224, 1, 17507, 1, 14019, 1, 5215, 1, 18710, 0, 46769, 0, 59806, 0, 20614, 1, 15696, 0, 59959, 0, 37902, 0, 29562, 0, 52097, 0, 24953, 0, 17261, 0, 54502, 1, 30706, 0, 37556, 0, 18272, 1, 1134, 1, 17662, 0, 23519, 0, 17886, 0, 16359, 0, 40648, 1, 11578, 0, 36008, 1, 14233, 0, 47199, 0, 46285, 0, 23880, 0, 57491, 1, 33242, 0, 21135, 1, 31378, 1, 13238, 0, 63430, 1, 22071, 0, 29550, 1, 27602, 0, 53884, 0, 29227, 0, 11378, 1, 7632, 0, 28560, 0, 58428, 1, 20220, 0, 51545, 0, 40374, 1, 31002, 1, 5352, 1, 30755, 1, 22382, 1, 10957, 1, 23307, 1, 27372, 0, 39225, 1, 4465, 1, 10910, 1, 19684, 0, 58580, 1, 31886, 0, 61228, 0, 28019, 1, 24614, 0, 51935, 1, 24894, 1, 19354, 0, 45758, 0, 33282, 0, 35203, 1, 15914, 1, 34178, 0, 62192, 0, 48547, 1, 16440, 0, 58583, 0, 14066, 0, 62207, 1, 21175, 0, 36650, 0, 57249, 1, 15182, 0, 63471, 1, 6325, 1, 3221, 0, 41204, 1, 1258, 1, 30293, 1, 18429, 1, 21624, 0, 49557, 0, 61775, 0, 43971, 1, 30067, 1, 3136, 1, 34133, 0, 24435, 1, 7782, 0, 54617, 1, 5687, 0, 55314, 1, 28201, 0, 47491, 0, 34979, 1, 11483, 0, 61998, 0, 45142, 0, 58057, 1, 12275, 1, 2031, 1, 10200, 0, 35995, 1, 3986, 1, 9210, 1, 11010, 0, 61686, 1, 15943, 1, 20698, 0, 17684, 0, 54606, 1, 25542, 1, 22077, 1, 3414, 1, 27324, 1, 32012, 1, 28584, 1, 349, 1, 28389, 0, 65057, 0, 47652, 1, 24607, 0, 22958, 0, 19110, 1, 25455, 1, 20806, 0, 13474, 0, 39258, 0, 32081, 0, 59662, 1, 12032, 0, 26287, 1, 7561, 0, 65459, 0, 15222, 1, 28662, 0, 31524, 0, 62524, 0, 63731, 1, 28956, 0, 39340, 1, 32805, 1, 21510, 0, 54817, 1, 26661, 1, 10460, 0, 15843, 1, 16324, 1, 31951, 0, 55465, 1, 33081, 0, 41836, 1, 30895, 1, 2785, 0, 44222, 0, 12305, 0, 26128, 0, 49032, 0, 32611, 0, 16984, 1, 14440, 0, 53906, 0, 28125, 1, 14293, 1, 5558, 0, 15262, 0, 10894, 0, 33135, 1, 8299, 1, 26548, 1, 34119, 0, 26871, 0, 21930, 0, 11939, 0, 50426, 1, 18963, 1, 11069, 1, 4830, 0, 23875, 0, 29040, 1, 442, 0, 65316, 1, 12738, 0, 19602, 0, 59993, 0, 61413, 1, 29597, 0, 60391, 0, 56884, 0, 32017, 0, 61814, 0, 36780, 0, 34229, 1, 31081, 0, 16265, 1, 2518, 0, 41854, 1, 21969, 1, 17385, 0, 29611, 0, 64836, 0, 12016, 0, 25898, 0, 39759, 1, 4786, 0, 16957, 1, 15203, 0, 42783, 0, 53327, 0, 60939, 1, 72, 0, 51615, 0, 42372, 1, 17329, 0, 51705, 0, 60517, 0, 32859, 0, 65056, 1, 478, 1, 29838, 0, 62688, 0, 19612, 0, 14898, 0, 35158, 0, 46004, 0, 12662, 0, 59241, 0, 50371, 1, 1178, 0, 32091, 0, 27889, 0, 21486, 1, 26169, 0, 43597, 1, 30952, 0, 16085, 1, 19265, 0, 17302, 0, 35657, 1, 23779, 0, 56279, 0, 14916, 0, 55031, 1, 34013, 1, 3786, 0, 15753, 0, 13910, 0, 10622, 1, 24006, 0, 45934, 0, 25961, 1, 7543, 1, 8041, 0, 11146, 0, 41762, 1, 10303, 0, 54839, 0, 42362, 0, 23054, 0, 41434, 1, 3383, 0, 51470, 1, 17389, 0, 52548, 1, 11735, 1, 12051, 0, 58491, 1, 25008, 1, 31947, 1, 27025, 0, 37349, 1, 15997, 0, 16921, 0, 54482, 0, 55983, 0, 18017, 1, 26077, 0, 28936, 1, 28505, 1, 32453, 1, 8517, 0, 12545, 1, 16972, 0, 16768, 1, 3168, 1, 14081, 0, 41459, 1, 22560, 0, 59389, 0, 24842, 0, 13968, 0, 46198, 0, 15283, 0, 49913, 0, 10405, 1, 27268, 1, 11229, 0, 54682, 0, 33524, 1, 10612, 1, 925, 0, 33406, 0, 51127, 0, 23852, 1, 6899, 0, 26294, 0, 42775, 1, 10386, 0, 47133, 0, 36766, 0, 30569, 0, 27931, 0, 54334, 0, 40819, 1, 5084, 1, 90, 0, 53032, 1, 14940, 0, 26777, 0, 56970, 0, 40175, 1, 10890, 0, 25173, 1, 21645, 0, 51275, 0, 16447, 1, 16407, 0, 10254, 1, 9746, 0, 60082, 0, 64998, 0, 49070, 0, 56755, 1, 3535, 1, 9802, 1, 10005, 1, 24907, 1, 24372, 0, 13663, 0, 36653, 0, 49672, 0, 55603, 1, 1067, 1, 22553, 0, 42518, 0, 63672, 0, 46069, 0, 35113, 0, 25531, 0, 55846, 1, 3375, 1, 32328, 1, 2400, 0, 64842, 1, 29975, 0, 53067, 0, 33019, 0, 48961, 1, 25774, 1, 15767, 0, 21127, 0, 55847, 0, 49862, 1, 25167, 0, 51583, 1, 29848, 1, 6343, 0, 51111, 1, 8168, 1, 2381, 1, 24782, 0, 38668, 0, 58760, 0, 46625, 0, 31014, 0, 60854, 0, 37481, 0, 49181, 1, 29022, 1, 22688, 0, 33578, 0, 17470, 1, 31785, 0, 14158, 1, 6360, 0, 37567, 0, 13543, 0, 56076, 0, 17520, 0, 13731, 0, 64073, 1, 13965, 0, 15814, 0, 22828, 1, 16519, 0, 45012, 0, 65118, 0, 27935, 1, 6998, 1, 1747, 1, 28661, 0, 11632, 0, 57374, 1, 23456, 0, 40356, 0, 55831, 0, 21812, 0, 13044, 0, 61280, 1, 28341, 1, 31482, 0, 39895, 1, 28799, 0, 43867, 1, 26264, 0, 39295, 0, 37827, 0, 43381, 0, 12882, 1, 34010, 1, 4190, 1, 26481, 1, 27040, 1, 17270, 1, 29704, 1, 7690, 1, 29863, 0, 41658, 0, 32251, 0, 21150, 0, 25532, 1, 3088, 1, 34452, 0, 28545, 0, 47911, 0, 10006, 1, 5333, 1, 11099, 1, 9444, 0, 29665, 0, 22260, 1, 18053, 0, 12297, 1, 28924, 0, 14367, 0, 48459, 0, 48094, 0, 64554, 0, 40966, 0, 55992, 0, 56286, 1, 25823, 0, 37712, 0, 10002, 0, 35390, 1, 14315, 0, 28003, 0, 11126, 1, 12353, 0, 21290, 0, 12281, 0, 58526, 1, 30905, 0, 32713, 0, 11803, 0, 15808, 1, 21614, 0, 61028, 0, 43603, 0, 49827, 1, 13838, 0, 63980, 0, 35321, 0, 63092, 1, 28414, 0, 61348, 1, 1876, 1, 23089, 1, 17220, 0, 61980, 0, 33183, 1, 17181, 0, 10272, 1, 24661, 1, 506, 1, 21963, 0, 22891, 0, 19636, 0, 14035, 0, 44978, 1, 917, 0, 35532, 1, 24790, 0, 45538, 0, 58391, 1, 2704, 0, 17327, 0, 54811, 0, 29411, 0, 19772, 0, 55843, 0, 34136, 0, 35640, 0, 31022, 0, 51453, 0, 59415, 0, 47405, 0, 24554, 0, 16449, 1, 19099, 1, 5614, 1, 25768, 0, 16316, 0, 24372, 0, 51800, 0, 25967, 0, 10335, 0, 26500, 0, 21511, 0, 47266, 0, 51507, 0, 43522, 0, 13302, 0, 28720, 0, 27828, 0, 17916, 0, 27845, 0, 60848, 0, 15202, 0, 21780, 0, 45198, 0, 15593, 1, 18863, 1, 18847, 0, 45107, 0, 55693, 0, 61697, 0, 40967, 0, 12361, 1, 19659, 0, 23903, 1, 10353, 1, 19926, 0, 55277, 1, 33931, 1, 15009, 1, 31492, 0, 49543, 1, 14143, 0, 37768, 0, 49987, 0, 52388, 0, 49705, 1, 31801, 0, 65261, 0, 32193, 1, 31444, 0, 55973, 0, 43554, 0, 14385, 0, 13284, 0, 31417, 0, 39843, 0, 47537, 1, 32060, 1, 26945, 0, 32979, 0, 20137, 0, 32782, 1, 32179, 0, 36171, 0, 52352, 1, 88, 0, 43735, 0, 32065, 0, 37801, 0, 57260, 0, 58699, 0, 46293, 1, 22665, 0, 65421, 1, 32935, 1, 32127, 0, 29825, 0, 36280, 0, 63395, 0, 13431, 1, 62, 0, 45294, 0, 36392, 0, 48817, 0, 42632, 1, 10278, 1, 13479, 0, 63583, 0, 21811, 0, 15712, 1, 17238, 0, 25558, 0, 40351, 1, 665, 0, 17467, 0, 25618, 0, 21325, 0, 48070, 1, 6203, 0, 22764, 1, 4806, 0, 61768, 1, 24596, 0, 35753, 1, 21888, 0, 44506, 0, 58439, 1, 26201, 1, 18502, 0, 34169, 0, 57299, 0, 16078, 1, 28887, 0, 12025, 0, 49243, 0, 24206, 0, 19466, 0, 36271, 0, 20805, 0, 44320, 0, 55138, 1, 15067, 1, 14801, 0, 59921, 1, 29477, 0, 42358, 0, 60271, 1, 26293, 1, 6582, 0, 42079, 0, 29714, 1, 9488, 1, 32162, 0, 53871, 0, 32772, 0, 23136, 0, 65014, 1, 34187, 0, 10739, 1, 31120, 1, 11552, 0, 60997, 0, 16566, 0, 34855, 0, 13575, 0, 10925, 0, 41426, 0, 45792, 1, 11730, 0, 54453, 0, 26345, 0, 45204, 0, 22055, 1, 648, 1, 24418, 1, 11430, 0, 16756, 0, 35954, 0, 41534, 0, 34625, 0, 16484, 0, 13180, 1, 6940, 0, 56865, 0, 29214, 0, 48021, 1, 20226, 0, 11530, 0, 25191, 0, 40256, 0, 42575, 1, 12479, 1, 13859, 0, 51976, 1, 26004, 0, 15438, 1, 17962, 1, 5030, 1, 13255, 0, 40988, 1, 19432, 0, 12950, 0, 43049, 0, 29441, 0, 33283, 0, 45021, 0, 19403, 0, 37671, 0, 52800, 0, 65255, 0, 19007, 0, 61032, 0, 41062, 0, 58160, 0, 16220, 0, 10787, 0, 55534, 0, 32708, 0, 26862, 0, 32335, 0, 46693, 0, 24824, 0, 21313, 0, 53841, 1, 10820, 0, 10703, 1, 17444, 0, 11274, 1, 2854, 0, 45798, 1, 890, 0, 27073, 0, 40291, 1, 10958, 0, 44324, 0, 15572, 1, 2042, 0, 59765, 0, 29681, 0, 24923, 0, 63193, 1, 3134, 0, 21643, 0, 17767, 1, 5203, 1, 12139, 1, 383, 1, 20579, 0, 35921, 0, 35695, 0, 17571, 0, 10776, 0, 55618, 0, 23004, 0, 35209, 1, 5120, 0, 28799, 0, 62772, 1, 22797, 1, 24153, 1, 30609, 0, 44732, 0, 41319, 0, 17299, 0, 48321, 0, 60541, 1, 33396, 0, 50849, 1, 16321, 0, 64010, 0, 34841, 0, 27063, 1, 7911, 1, 17798, 0, 44937, 0, 59004, 0, 17881, 1, 5843, 1, 27317, 0, 32440, 1, 22973, 0, 29889, 1, 17480, 0, 34898, 0, 43489, 0, 26612, 0, 58720, 0, 63399, 0, 46867, 0, 23466, 0, 63419, 0, 53408, 1, 1115, 0, 44058, 0, 13953, 1, 3525, 1, 26990, 1, 3938, 0, 56975, 1, 29055, 0, 20141, 1, 19159, 0, 14687, 0, 34338, 0, 26755, 0, 11290, 0, 30499, 0, 52953, 1, 12570, 0, 44897};
static B[] = {0, 61150, 1, 28488, 0, 43406, 1, 33125, 0, 17299, 0, 43603, 1, 24596, 1, 24596, 1, 31886, 1, 9766, 0, 18024, 1, 28488, 1, 6573, 0, 64129, 0, 55155, 1, 2047, 0, 34091, 0, 43008, 1, 31886, 1, 13099, 0, 43526, 0, 44804, 0, 11603, 0, 26938, 0, 52745, 0, 59992, 1, 4711, 0, 24737, 0, 35575, 1, 18588, 1, 16440, 0, 33349, 1, 11880, 0, 63630, 1, 24006, 0, 39849, 1, 31886, 0, 17299, 1, 9911, 1, 17881, 0, 29681, 0, 35541, 0, 55031, 1, 4711, 1, 16587, 1, 24006, 1, 28488, 0, 46875, 1, 32138, 0, 38394, 0, 43603, 0, 13575, 0, 47405, 1, 24006, 1, 2837, 1, 8957, 1, 26372, 0, 28783, 0, 51470, 1, 14914, 0, 13084, 1, 25721, 0, 43109, 0, 35200, 0, 17599, 0, 55031, 0, 24081, 0, 55031, 0, 62239, 0, 16768, 0, 44773, 0, 50548, 0, 28934, 1, 13357, 0, 63696, 0, 55031, 1, 30887, 0, 43603, 0, 52518, 1, 16440, 1, 17823, 0, 60991, 0, 35753, 1, 19775, 0, 44981, 0, 43603, 0, 43603, 1, 28488, 0, 33301, 1, 29863, 0, 13159, 0, 16215, 0, 48454, 0, 35375, 0, 16768, 0, 53486, 1, 972, 0, 49287, 0, 46116, 0, 45156, 1, 11483, 1, 3431, 0, 31955, 1, 16440, 1, 25289, 1, 23124, 1, 15914, 0, 30851, 0, 60702, 1, 25274, 1, 25648, 1, 18294, 0, 26391, 0, 45156, 1, 31886, 0, 17118, 0, 38582, 0, 18325, 0, 23200, 1, 16478, 0, 64836, 1, 3899, 0, 51941, 0, 43603, 0, 57530, 0, 23054, 1, 15199, 1, 24006, 0, 29681, 0, 17299, 1, 28488, 1, 26284, 0, 18254, 0, 20182, 0, 31746, 0, 40070, 0, 64836, 1, 28488, 0, 60848, 0, 21613, 1, 19885, 0, 14916, 0, 59921, 0, 51470, 0, 62768, 0, 22482, 0, 59921, 1, 15914, 0, 13575, 0, 29681, 1, 16479, 0, 54143, 0, 35753, 0, 23054, 1, 27729, 0, 20135, 1, 18201, 1, 30311, 0, 31173, 1, 30243, 0, 13575, 1, 28488, 1, 3494, 0, 55031, 1, 31886, 1, 30289, 1, 3535, 0, 45758, 0, 65255, 0, 64724, 0, 46293, 1, 3985, 0, 34079, 0, 42340, 0, 18205, 0, 14916, 1, 24006, 0, 45290, 0, 51470, 1, 28488, 0, 13284, 0, 25804, 1, 29863, 1, 24596, 0, 43603, 0, 25467, 1, 7472, 0, 61796, 0, 40724, 0, 43603, 0, 51470, 0, 59921, 1, 24596, 1, 29863, 0, 51275, 0, 63244, 0, 64836, 1, 31564, 0, 16885, 0, 13284, 0, 60848, 0, 23902, 0, 16768, 0, 14331, 0, 55031, 1, 16440, 0, 58343, 0, 55031, 1, 34360, 0, 48343, 1, 15914, 0, 60848, 0, 19012, 1, 14797, 1, 29863, 0, 38271, 1, 33805, 0, 33892, 1, 11849, 1, 6017, 0, 60848, 0, 13575, 1, 22874, 1, 16407, 1, 32572, 0, 27568, 0, 25456, 1, 15914, 0, 13575, 0, 45001, 0, 65255, 0, 16633, 1, 29863, 1, 28962, 0, 55031, 1, 31886, 1, 27436, 0, 40280, 0, 30760, 1, 28661, 1, 11483, 0, 13431, 0, 64836, 1, 19833, 1, 4711, 0, 64137, 0, 52966, 0, 60854, 0, 65255, 1, 15774, 0, 56892, 0, 24595, 1, 15914, 0, 43167, 0, 29681, 0, 64836, 1, 4711, 0, 43603, 1, 30388, 1, 20977, 1, 23790, 1, 9008, 1, 4711, 0, 36593, 0, 12273, 0, 31653, 0, 43603, 0, 64836, 0, 13575, 0, 13431, 0, 12887, 0, 42508, 0, 13431, 0, 44019, 0, 40786, 0, 64836, 0, 14916, 0, 55031, 0, 14916, 0, 17299, 1, 32671, 0, 45758, 0, 43978, 0, 29681, 1, 16365, 1, 27095, 0, 24451, 1, 5057, 1, 31886, 0, 13325, 0, 61844, 1, 24006, 1, 3535, 0, 17299, 1, 31886, 0, 46194, 1, 28380, 1, 14122, 1, 16440, 1, 11483, 1, 14028, 1, 12342, 1, 2749, 0, 46867, 1, 24596, 0, 64599, 0, 24241, 1, 25823, 0, 13431, 0, 60848, 0, 56819, 0, 46898, 0, 14916, 0, 36671, 0, 14916, 1, 15914, 0, 29904, 0, 29681, 0, 26634, 0, 46867, 0, 51516, 1, 5626, 0, 13284, 1, 10051, 0, 16768, 0, 13575, 0, 56571, 1, 20777, 0, 49453, 1, 24006, 0, 60854, 1, 12885, 0, 60854, 0, 24365, 0, 64963, 0, 56013, 1, 31886, 0, 20848, 0, 46293, 0, 54464, 0, 13431, 0, 23054, 0, 58590, 1, 24006, 1, 28846, 0, 14916, 1, 8269, 1, 14293, 1, 16216, 0, 51151, 1, 25972, 1, 15914, 0, 45279, 1, 7076, 0, 15262, 0, 59346, 0, 24649, 0, 14916, 0, 26436, 0, 43083, 0, 45758, 0, 59921, 1, 18048, 1, 15914, 1, 330, 0, 40953, 0, 13431, 1, 488, 1, 9069, 1, 7576, 0, 25114, 1, 15640, 0, 51692, 0, 48595, 1, 12712, 0, 46867, 1, 29863, 0, 27946, 0, 46293, 0, 21967, 1, 4711, 0, 11765, 0, 23054, 1, 4711, 1, 16440, 0, 57844, 0, 36987, 0, 45758, 0, 40822, 0, 15262, 0, 17299, 0, 20462, 1, 20832, 1, 4532, 0, 50859, 1, 24006, 0, 14382, 0, 64992, 0, 57606, 0, 27907, 0, 25772, 0, 13575, 0, 51470, 1, 11603, 1, 28488, 1, 24596, 0, 40921, 0, 28732, 1, 31679, 0, 20405, 0, 59243, 0, 35753, 1, 28194, 0, 21723, 1, 11483, 0, 60225, 0, 62922, 0, 13575, 0, 44646, 0, 49938, 0, 65110, 0, 59518, 1, 3535, 0, 45758, 0, 34764, 1, 25823, 1, 18504, 0, 51534, 1, 19183, 0, 22568, 1, 4407, 0, 13864, 1, 24623, 0, 21234, 0, 43277, 1, 5825, 1, 12745, 0, 23720, 1, 25823, 0, 65255, 1, 11483, 0, 34340, 0, 10686, 1, 16440, 1, 25823, 0, 17299, 0, 45758, 0, 42820, 0, 54646, 1, 16407, 0, 60854, 0, 16187, 0, 58213, 0, 23054, 1, 16158, 0, 61502, 1, 7289, 1, 2708, 0, 64836, 0, 56505, 1, 28173, 0, 45156, 0, 22280, 1, 16440, 0, 35694, 1, 29863, 1, 17212, 0, 49843, 0, 13575, 1, 8367, 1, 4711, 0, 43603, 1, 15173, 0, 35639, 0, 23054, 1, 2265, 0, 57089, 0, 20574, 0, 47405, 1, 28488, 1, 21647, 0, 56294, 0, 65255, 0, 31819, 0, 55980, 0, 23054, 0, 46293, 0, 47565, 0, 47405, 1, 16407, 0, 43603, 0, 13284, 1, 16440, 1, 1955, 1, 16407, 0, 65255, 0, 17088, 0, 14916, 0, 62365, 1, 13855, 1, 3445, 0, 18156, 0, 23054, 1, 11483, 1, 28488, 0, 34897, 0, 13284, 1, 16071, 1, 11483, 0, 13961, 1, 31854, 1, 21784, 1, 29524, 1, 29863, 0, 19111, 0, 29670, 0, 18317, 1, 24663, 1, 27496, 0, 31988, 0, 13284, 0, 11497, 0, 23054, 1, 24006, 1, 11483, 1, 28488, 1, 29863, 1, 11483, 0, 63367, 0, 50854, 1, 13400, 0, 45758, 0, 23054, 1, 14293, 0, 13431, 0, 52197, 1, 7540, 0, 17299, 0, 29541, 1, 23395, 1, 18480, 0, 62808, 0, 13284, 1, 2027, 0, 11156, 0, 64971, 0, 13284, 1, 7202, 0, 65255, 1, 27252, 0, 47405, 1, 2496, 0, 41799, 1, 34236, 0, 43603, 0, 13284, 1, 31886, 1, 11483, 1, 4711, 0, 65117, 1, 24006, 1, 16578, 0, 13284, 0, 46293, 1, 16407, 1, 29863, 1, 26084, 0, 59242, 0, 44667, 0, 10528, 0, 51072, 0, 64836, 0, 43603, 1, 109, 0, 46293, 0, 48017, 1, 15914, 1, 28661, 1, 31886, 1, 15914, 1, 24006, 1, 16782, 1, 9358, 0, 38935, 0, 47295, 1, 7554, 0, 29681, 1, 24596, 0, 30968, 1, 18589, 1, 3535, 1, 31886, 1, 17762, 0, 13431, 0, 48002, 1, 16407, 0, 54359, 1, 4711, 1, 16407, 0, 34203, 1, 5557, 1, 24596, 1, 24596, 1, 30900, 0, 43603, 0, 23054, 1, 10057, 0, 22369, 0, 13431, 0, 65255, 0, 46867, 0, 28505, 1, 16440, 0, 47932, 1, 564, 0, 13575, 0, 43722, 0, 13284, 0, 59394, 1, 25823, 0, 46913, 0, 10753, 0, 14556, 1, 17622, 0, 45758, 1, 20397, 1, 33984, 0, 16049, 1, 10155, 1, 9753, 0, 13284, 1, 6941, 1, 16440, 1, 24006, 0, 43603, 0, 47405, 1, 8226, 0, 14241, 0, 45084, 1, 31886, 0, 17299, 0, 16768, 0, 32846, 0, 13284, 0, 16768, 0, 43603, 0, 30815, 1, 8651, 1, 13052, 0, 14916, 0, 34585, 0, 15981, 1, 3223, 0, 64836, 0, 58182, 0, 46867, 0, 27220, 0, 51119, 0, 27599, 0, 29681, 1, 16407, 0, 56829, 0, 65255, 0, 42665, 0, 23054, 0, 43603, 0, 24189, 1, 4293, 0, 15511, 1, 21863, 1, 3535, 0, 18973, 0, 13284, 0, 17299, 0, 46293, 1, 25823, 1, 11483, 1, 16407, 1, 33140, 0, 26112, 0, 61556, 0, 46867, 0, 51275, 0, 15153, 0, 54552, 1, 4255, 1, 20049, 1, 15914, 0, 55031, 0, 59921, 1, 22281, 1, 23978, 1, 6960, 1, 18423, 0, 21026, 1, 10886, 0, 14916, 0, 45699, 0, 23054, 0, 17309, 0, 36357, 0, 13575, 0, 20557, 0, 19650, 0, 23054, 1, 15396, 0, 13284, 0, 17849, 1, 7877, 0, 60585, 0, 59847, 1, 11483, 0, 13284, 1, 13863, 0, 45758, 0, 45156, 0, 65255, 0, 56078, 0, 56557, 0, 13575, 0, 61450, 0, 65255, 0, 52620, 0, 36666, 0, 16768, 0, 60048, 0, 13431, 0, 60848, 0, 65255, 0, 63254, 1, 24596, 0, 26716, 0, 50888, 0, 50172, 0, 56206, 1, 16440, 1, 31886, 0, 50570, 0, 45156, 1, 12328, 1, 33505, 1, 16440, 0, 10836, 0, 59921, 0, 63849, 1, 4297, 1, 33430, 0, 16768, 1, 27290, 0, 13431, 0, 58198, 1, 15914, 0, 14916, 0, 43592, 1, 15855, 0, 31727, 1, 24006, 0, 15228, 0, 23798, 0, 56609, 1, 31012, 0, 54178, 0, 53532, 0, 52896, 1, 13841, 0, 40105, 0, 60848, 1, 28661, 0, 23651, 1, 25823, 0, 44731, 1, 11483, 0, 14916, 1, 8261, 1, 11483, 1, 4498, 1, 28488, 1, 15914, 1, 4711, 1, 25646, 0, 22228, 1, 30159, 0, 51470, 1, 4711, 1, 14464, 1, 25823, 0, 40467, 1, 18156, 1, 28298, 0, 46293, 0, 56325, 0, 58994, 0, 13431, 1, 4711, 0, 14916, 0, 12534, 0, 29681, 0, 14222, 0, 65255, 1, 11483, 1, 28488, 1, 21968, 1, 17418, 0, 41337, 0, 13431, 1, 12512, 1, 27941, 0, 23054, 0, 44215, 0, 14916, 1, 16440, 0, 43603, 0, 31672, 1, 19579, 1, 29863, 0, 59921, 1, 4228, 0, 43091, 1, 19639, 0, 32959, 1, 1517, 0, 55031, 0, 45156, 1, 11108, 0, 35658, 1, 11279, 1, 2587, 0, 16768, 0, 59921, 1, 24956, 0, 64836, 0, 45758, 0, 30227, 1, 2294, 0, 23975, 0, 45118, 0, 62795, 0, 14916, 1, 16440, 0, 64836, 0, 47405, 1, 3644, 0, 17299, 0, 60848, 1, 28488, 1, 3727, 0, 13284, 1, 4711, 1, 3535, 0, 20261, 0, 64836, 0, 27431, 0, 59892, 1, 6313, 0, 43778, 1, 16407, 0, 38747, 1, 25823, 0, 13575, 1, 24006, 1, 23289, 1, 4390, 1, 4711, 0, 45758, 0, 13284, 1, 12709, 1, 9608, 0, 13431, 0, 55700, 0, 25112, 0, 27791, 0, 43603, 0, 26272, 0, 44266, 0, 52239, 0, 13137, 0, 56515, 0, 14094, 0, 46867, 0, 27805, 0, 35753, 1, 24006, 0, 36014, 0, 60848, 1, 13439, 0, 29681, 0, 13575, 0, 28673, 0, 46293, 0, 46249, 0, 15198, 0, 51470, 0, 40408, 0, 17880, 0, 29681, 1, 11483, 0, 60496, 0, 13897, 0, 46293, 1, 7810, 1, 13370, 1, 29863, 1, 34222, 0, 16768, 0, 49027, 0, 64836, 1, 4711, 0, 17299, 0, 17299, 0, 46867, 0, 23383, 1, 10098, 1, 14535, 0, 35488, 1, 16407, 0, 43632, 1, 33313, 1, 22486, 0, 65255, 1, 24596, 0, 37716, 1, 15541, 0, 57328, 1, 5711, 1, 24596, 0, 62595, 0, 19687, 1, 16440, 1, 15914, 0, 60526, 0, 28900, 1, 16407, 0, 55031, 1, 33279, 0, 17299, 0, 64144, 1, 4711, 0, 35753, 1, 4711, 1, 29863, 1, 24596, 0, 23054, 0, 19388, 0, 60854, 1, 16440, 0, 48543, 0, 13575, 0, 16890, 0, 35753, 0, 12805, 0, 16768, 1, 14293, 1, 4711, 1, 15914, 1, 15914, 0, 32436, 0, 47405, 0, 27716, 0, 62305, 1, 23620, 1, 33851, 1, 17821, 0, 64896, 0, 29681, 1, 21638, 0, 13575, 0, 49843, 0, 50689, 0, 47405, 1, 25823, 0, 13575, 0, 42477, 0, 14916, 0, 19758, 1, 24006, 0, 13575, 1, 27696, 0, 16768, 0, 29681, 0, 17299, 1, 5100, 0, 34371, 1, 9958, 0, 18000, 1, 15914, 0, 13284, 0, 15134, 1, 31886, 0, 26225, 0, 26288, 0, 33683, 0, 17299, 1, 14293, 0, 64836, 1, 24006, 0, 21632, 1, 17605, 0, 16639, 0, 31125, 1, 13706};

swap_vals(a, b)
{
	auto t = *a;
	*a = *b;
	*b = t;
}

sort_array(inout, size)
{
	auto i = 0;
	while (i < size - 2) {
		auto j = i + 2;
		while (j < size) {
			if (less32(inout + i, inout + j)) {
				swap_vals(inout + i, inout + j);
				swap_vals(inout + i + 1, inout + j + 1);
			}
			j += 2;
		}
		i += 2;
	}
}

sum_diffs(out_ptr, A, B, size)
{
	out_ptr[0] = 0;
	out_ptr[1] = 0;
	auto res[2];
	auto i = 0;
	while (i < size) {
		if (less32(A + i, B + i)) {
			sub32(res, B + i, A + i);
		} else {
			sub32(res, A + i, B + i);
		}
		add32(out_ptr, out_ptr, res);
		i += 2;
	}
}

print_array(arr, size)
{
	auto i = 0;
	{
		auto str[] = "%u [\n";
		auto val[] = { size };
		printf(str, val);
	}
	while (i < size) {
		auto vals[] = { arr[i], arr[i + 1] };
		auto str[] = "  %x %x\n";
		printf(str, vals);
		i += 2;
	}
	{
		auto str[] = "]\n";
		printf(str, NULL);
	}
}

solve(result)
{
	auto start_str[] = "start sort...";
	auto start_diff_str[] = "start diff...";
	auto done_str[] = "done\n";

	printf(start_str, NULL);
	sort_array(A, sizeof(A) - 1);
	printf(done_str, NULL);

	printf(start_str, NULL);
	sort_array(B, sizeof(B) - 1);
	printf(done_str, NULL);

	printf(start_diff_str, NULL);
	sum_diffs(result, A, B, sizeof(A) - 1);
	printf(done_str, NULL);
}

main(a,b)
{
	d_hwscan();
	d_init_tty();
	d_init_monitor(MON_MSG_TXTMODE);
	i_print_sys_info();

	auto start = clock();
	auto result[2];
	solve(result);
	auto stop = clock();
	{
		auto time_fmt[] = "Time: %us\n";
		auto time_vals[] = { ((stop - start) + 500) / 1000 };
		printf(time_fmt, time_vals);
	}
	{
		auto result_fmt[] = "Result: %x%x\n";
		auto result_vals[] = { result[HI], result[LO] };
		printf(result_fmt, result_vals);
	}

	i_finish_stall();

	return EXIT_SUCCESS;
}
